import pytest
import numpy as np
import networkx as nx
from PALD import GPALD


@pytest.fixture
def G():
    # Read test data from ex1data file and make dissimlarity matrix
    G = nx.Graph()
    G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])
    G.add_edges_from([
         [0,1],
         [0,3],
         [1,2],
         [1,3],
         [2,4],
         [3,4],
         [1,5],
         [5,7],
         [6,7],
         [6,8],
         [6,9],
         [7,9],
         [8,9],
    ])

    yield G  # Provide the data to the test


def test_fit(G):
    gp = GPALD()
    gp.fit(G)

    answer = np.array([
        [ 0.00000000, -0.05025042, -0.13316070, -0.06601588, -0.11243192, -0.05684300,  0.03491131, -0.00437181,  0.01046191,  0.03491131],
        [-0.05025042,  0.00000000, -0.00732269, -0.01477285, -0.10609927,  0.03392024,  0.07008812,  0.04780903,  0.06476933,  0.07008812],
        [-0.13316070, -0.00732269,  0.00000000, -0.14139858, -0.03121657, -0.04260273,  0.04352223,  0.01015567,  0.01726523,  0.04352223],
        [-0.06601588, -0.01477285, -0.14139858,  0.00000000, -0.02062239, -0.04095466,  0.07064631,  0.04679508,  0.04224186,  0.07064631],
        [-0.11243192, -0.10609927, -0.03121657, -0.02062239,  0.00000000, -0.08021997,  0.04694100,  0.05235215,  0.01378337,  0.04694100],
        [-0.05684300,  0.03392024, -0.04260273, -0.04095466, -0.08021997,  0.00000000, -0.04288590,  0.02922244, -0.09002530, -0.04288590],
        [ 0.03491131,  0.07008812,  0.04352223,  0.07064631,  0.04694100, -0.04288590,  0.00000000, -0.03111153, -0.07410916, -0.09734539],
        [-0.00437181,  0.04780903,  0.01015567,  0.04679508,  0.05235215,  0.02922244, -0.03111153,  0.00000000, -0.09835981, -0.03111153],
        [ 0.01046191,  0.06476933,  0.01726523,  0.04224186,  0.01378337, -0.09002530, -0.07410916, -0.09835981,  0.00000000, -0.07410916],
        [ 0.03491131,  0.07008812,  0.04352223,  0.07064631,  0.04694100, -0.04288590, -0.09734539, -0.03111153, -0.07410916,  0.00000000],
    ])

    np.testing.assert_allclose(gp.total_relative_dissipation, answer, rtol=1e-5, atol=1e-5)


def test_predict(G):
    gp = GPALD()
    gp.total_relative_dissipation = np.array([
        [ 0.00000000, -0.05025042, -0.13316070, -0.06601588, -0.11243192, -0.05684300,  0.03491131, -0.00437181,  0.01046191,  0.03491131],
        [-0.05025042,  0.00000000, -0.00732269, -0.01477285, -0.10609927,  0.03392024,  0.07008812,  0.04780903,  0.06476933,  0.07008812],
        [-0.13316070, -0.00732269,  0.00000000, -0.14139858, -0.03121657, -0.04260273,  0.04352223,  0.01015567,  0.01726523,  0.04352223],
        [-0.06601588, -0.01477285, -0.14139858,  0.00000000, -0.02062239, -0.04095466,  0.07064631,  0.04679508,  0.04224186,  0.07064631],
        [-0.11243192, -0.10609927, -0.03121657, -0.02062239,  0.00000000, -0.08021997,  0.04694100,  0.05235215,  0.01378337,  0.04694100],
        [-0.05684300,  0.03392024, -0.04260273, -0.04095466, -0.08021997,  0.00000000, -0.04288590,  0.02922244, -0.09002530, -0.04288590],
        [ 0.03491131,  0.07008812,  0.04352223,  0.07064631,  0.04694100, -0.04288590,  0.00000000, -0.03111153, -0.07410916, -0.09734539],
        [-0.00437181,  0.04780903,  0.01015567,  0.04679508,  0.05235215,  0.02922244, -0.03111153,  0.00000000, -0.09835981, -0.03111153],
        [ 0.01046191,  0.06476933,  0.01726523,  0.04224186,  0.01378337, -0.09002530, -0.07410916, -0.09835981,  0.00000000, -0.07410916],
        [ 0.03491131,  0.07008812,  0.04352223,  0.07064631,  0.04694100, -0.04288590, -0.09734539, -0.03111153, -0.07410916,  0.00000000],
    ])
    gp.node_ids = {node: id for node, id in zip(G.nodes, range(G.number_of_nodes()))}

    clusters = gp.predict()

    answer = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 0,
        9: 0
    }

    assert clusters == answer