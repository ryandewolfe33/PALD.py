import pytest
import numpy as np
import networkx as nx
from PALD import GPALD

@pytest.fixture
def G():
    # Read test data from ex1data file and make dissimlarity matrix
    G = nx.Graph()
    G.add_nodes_from([0,1,2,3,4,5,6,7,8, 9])
    G.add_edges_from([
         [0,1],
         [0,2],
         [0,3],
         [0,4],
         [1,2],
         [1,3],
         [1,4],
         [2,3],
         [2,4],
         [3,4],
         [4,5],
         [5,6],
         [5,7],
         [5,8],
         [5,9],
         [6,7],
         [6,8],
         [6,9],
         [7,8],
         [7,9],
         [8,9],
    ])

    yield G  # Provide the data to the test


def test_fit(G):
    gp = GPALD()
    gp.fit(G)

    answer = np.array([
        [ 0.0000000, -0.1266751, -0.1266751, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751,  0.0000000, -0.1266751, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751, -0.1266751,  0.0000000, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751, -0.1266751, -0.1266751,  0.0000000, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1035438, -0.1035438, -0.1035438, -0.1035438,  0.0000000,  0.0211921,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0211921,  0.0000000, -0.1035438, -0.1035438, -0.1035438, -0.1035438],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438,  0.0000000, -0.1266751, -0.1266751, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751,  0.0000000, -0.1266751, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751, -0.1266751,  0.0000000, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751, -0.1266751, -0.1266751,  0.0000000],
    ])

    np.testing.assert_allclose(gp.total_relative_dissipation, answer, rtol=1e-5, atol=1e-5)


def test_predict(G):
    gp = GPALD()
    gp.G = G
    gp.total_relative_dissipation = np.array([
        [ 0.0000000, -0.1266751, -0.1266751, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751,  0.0000000, -0.1266751, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751, -0.1266751,  0.0000000, -0.1266751, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1266751, -0.1266751, -0.1266751,  0.0000000, -0.1035438,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [-0.1035438, -0.1035438, -0.1035438, -0.1035438,  0.0000000,  0.0211921,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0211921,  0.0000000, -0.1035438, -0.1035438, -0.1035438, -0.1035438],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438,  0.0000000, -0.1266751, -0.1266751, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751,  0.0000000, -0.1266751, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751, -0.1266751,  0.0000000, -0.1266751],
        [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, -0.1035438, -0.1266751, -0.1266751, -0.1266751,  0.0000000],
    ])
    gp.node_ids = {node: id for node, id in zip(G.nodes, range(G.number_of_nodes()))}

    clusters = gp.predict()

    answer = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 1,
        6: 1,
        7: 1,
        8: 1,
        9: 1,
    }

    assert clusters == answer